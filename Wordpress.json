{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS Cloud Formation Template to startup a Wordpress Site",

  "Parameters" : {
    "SSHSecurityGroup" :  {
      "Type" : "AWS::EC2::SecurityGroup::Id",
      "Default" : "",
      "Description" : "Security Group for SSH Access"
    },
    "WebSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup::Id",
      "Default" : "",
      "Description" : "Security Group for HTTP and HTTPS Access"
    },
    "SnapToRestore" : {
      "Type" : "String",
      "Default" : "",
      "Description" : "snap id to restore"
    },
    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },
    "Subnets" : {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },
    "EnvironmentSize": {
      "Description" : "Size of Wordpress Site",
      "Type" : "String",
      "Default" : "Small",
      "AllowedValues" : ["Small", "Medium", "Large"],
      "ConstraintDescription" : "Size of Environment"
		},
    "KeyPair": {
      "Description" : "Amazon EC2 Key Pair",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "DestinationBucketName": {
      "Description" : "Destination of the S3 Bucket Logs",
      "Type" : "String",
      "ConstraintDescription" : "must be the name of an existing S3 Bucket."
    },
    "LogFilePrefix": {
      "Description" : "Prefix for the S3 Bucket Logs",
      "Type" : "String",
      "ConstraintDescription" : "Name of log file prefix"
    },
    "DatabaseName" : {
      "Description" : "The WordPress database name",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "DatabaseUser" : {
      "Description" : "The WordPress database admin account username",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "DatabasePassword" : {
      "Description" : "The WordPress database admin account password",
      "Type" : "String",
      "MinLength" : "8",
			"MaxLength" : "41",
			"NoEcho" : "true",
			"AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },
    "MultiAZDatabase": {
      "Default": "false",
      "Description" : "Create a Multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "ConstraintDescription" : "must be either true or false."
    },
    "AuthKey": {
      "Description" : "Paste in Salt Value for AUTH_KEY",
      "Type": "String"
    },
    "SecureAuthKey": {
      "Description" : "Paste in Salt Value for SECURE_AUTH_KEY",
      "Type": "String"
    },
    "LoggedInKey": {
      "Description" : "Paste in Salt Value for LOGGED_IN_KEY",
      "Type": "String"
    },
    "NonceKey": {
      "Description" : "Paste in Salt Value for NONCE_KEY",
      "Type": "String"
    },
    "AuthSalt": {
      "Description" : "Paste in Salt Value for AUTH_SALT",
      "Type": "String"
    },
    "SecureAuthSalt": {
      "Description" : "Paste in Salt Value for SECURE_AUTH_SALT",
      "Type": "String"
    },
    "LoggedInSalt": {
      "Description" : "Paste in Salt Value for LOGGED_IN_SALT",
      "Type": "String"
    },
    "NonceSalt": {
      "Description" : "Paste in Salt Value for NONCE_SALT",
      "Type": "String"
    }
  },

  "Conditions" : {
		"isRestore" : {"Fn::Not" : [{"Fn::Equals" : [{"Ref" : "SnapToRestore"}, ""]}]}
	},

  "Mappings" : {
    "RegionMap": {
			"us-east-1": {
				"AMALINUX": "ami-0ff8a91507f77f867"
			},
			"us-east-2": {
				"AMALINUX": "ami-0b59bfac6be064b78"
			},
			"us-west-1": {
				"AMALINUX": "ami-0bdb828fd58c52235"
			},
			"us-west-2": {
				"AMALINUX": "ami-a0cfeed8"
			}
		},
		"InstanceSize": {
			"Small": {
				"EC2": "t2.micro",
				"DB": "db.t2.micro"
			},
			"Medium": {
				"EC2": "t2.small",
				"DB": "db.t2.small"
			},
			"Large": {
				"EC2": "t2.medium",
				"DB": "db.t2.medium"
			}
		}
  },

  "Resources" : {
    "DB" : {
        "Type" : "AWS::RDS::DBInstance",
        "DeletionPolicy" : "Snapshot",
        "Properties" : {
          "AllocatedStorage" : "20",
          "AllowMajorVersionUpgrade" : true,
          "AutoMinorVersionUpgrade" : true,
          "CopyTagsToSnapshot" : true,
          "DBInstanceClass" : {"Fn::FindInMap" : ["InstanceSize", {"Ref" : "EnvironmentSize"}, "DB"]},
          "DBInstanceIdentifier" : {"Ref" : "DatabaseName"},
          "DBName": {"Fn::If" : ["isRestore", {"Ref" : "AWS::NoValue"}, {"Ref" : "DatabaseName"}]},
          "Engine" : "MySQL",
          "MultiAZ" : { "Ref": "MultiAZDatabase"},
          "MasterUsername": {"Fn::If" : ["isRestore", {"Ref" : "AWS::NoValue"}, {"Ref" : "DatabaseUser"}]},
          "MasterUserPassword": {"Fn::If" : ["isRestore", {"Ref" : "AWS::NoValue"}, {"Ref" : "DatabasePassword"}]},
          "DBSnapshotIdentifier" : {"Fn::If" : ["isRestore", {"Ref" : "SnapToRestore"}, {"Ref" : "AWS::NoValue"}]},
          "PubliclyAccessible" : false,
          "StorageType" : "gp2"
        }
    },
    "ELBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "Name" : {"Ref" : "DatabaseName"},
        "HealthCheckPath" : "/wordpress/wp-admin/install.php",
        "HealthCheckIntervalSeconds" : 10,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 2,
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "VpcId"},
        "TargetGroupAttributes" :
          [ { "Key" : "stickiness.enabled", "Value" : "true" },
            { "Key" : "stickiness.type", "Value" : "lb_cookie" },
            { "Key" : "stickiness.lb_cookie.duration_seconds", "Value" : "30" }
        ]
      }
    },
    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Name" : {"Ref" : "DatabaseName"},
        "SecurityGroups" : [{"Ref" : "WebSecurityGroup"}],
        "Subnets" : { "Ref" : "Subnets"}
      }
    },
    "ELBCertificate" : {
      "Type" : "AWS::CertificateManager::Certificate",
      "Properties" : {
        "DomainName" : "www.thecloudguy.org",
        "SubjectAlternativeNames" : [ "www.thecloudguyllc.com", "www.thecloudguy.biz" ],
        "ValidationMethod" : "DNS"
      }
    },
    "ELBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ELBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "ElasticLoadBalancer" },
        "Certificates" : [{
          "CertificateArn" : { "Ref" : "ELBCertificate" }
        }],
        "Port" : "443",
        "Protocol" : "HTTPS"
      }
    },
    "AutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "2",
        "MaxSize" : "3",
        "DesiredCapacity" : "2",
        "TargetGroupARNs" : [ { "Ref" : "ELBTargetGroup" } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
          "ImageId" : {"Fn::FindInMap" : ["RegionMap", {"Ref" : "AWS::Region"}, "AMALINUX"]},
          "InstanceType" : {"Fn::FindInMap" : ["InstanceSize", {"Ref" : "EnvironmentSize"}, "EC2"]},
          "KeyName" : {"Ref" : "KeyPair"},
          "SecurityGroups" : [ {"Ref" : "SSHSecurityGroup"}, {"Ref" : "WebSecurityGroup"}],
          "UserData" : {"Fn::Base64" : {"Fn::Join" : ["", [
  						"#!/bin/bash", "\n",
              "yum update -y aws-cfn-bootstrap", "\n",

  						"/opt/aws/bin/cfn-init -v",
  						" --stack ", {"Ref" : "AWS::StackName"},
  						" --resource LaunchConfig",
  						" --configsets wordpress",
  						" --region ", {"Ref" : "AWS::Region"}, "\n",

              "yum update -y", "\n",

              "/opt/aws/bin/cfn-signal -e $?",
              " --stack ", {"Ref" : "AWS::StackName"},
              " --resource AutoScalingGroup",
              " --region ", {"Ref" : "AWS::Region"}, "\n"
  				]]}}
        },
      "Metadata" : {
  				"AWS::CloudFormation::Init" : {
  					"configSets" : {
  						"wordpress" : ["configure_cfn", "install_wordpress"]
  					},
  					"configure_cfn" : {
  						"files" : {
  							"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
  								"content" : {"Fn::Join" : ["", [
  									"[cfn-auto-reloader-hook]\n",
  									"triggers=post.update\n",
  									"path=Resources.EC2.Metadata.AWS::CloudFormation::Init\n",
  									"action=/opt/aws/bin/cfn-init -v",
  									" --stack ", {"Ref" : "AWS::StackName"},
  									" --resource LaunchConfig",
  									" --configsets wordpress",
  									" --region ", {"Ref" : "AWS::Region"}, "\n"
  								]]},
  								"mode" : "000400",
  								"owner" : "root",
  								"group" : "root"
  							},
  							"/etc/cfn/cfn-hup.conf" : {
  								"content" : {"Fn::Join" : ["",[
  									"[main]\n",
  									"stack=", {"Ref" : "AWS::StackId"}, "\n",
  									"region=", {"Ref" : "AWS::Region"}, "\n",
  									"verbose=true\n",
  									"interval=5\n"
  								]]},
  								"mode" : "000400",
  								"owner" : "root",
  								"group" : "root"
  							}
  						},
  						"services" : {
  							"sysvinit" : {
  								"cfn-hup" : {
  									"enabled" : "true",
  									"ensureRunning" : "true",
  									"files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
  								}
  							}
  						}
  					},
  					"install_wordpress" : {
  						"packages" : {
  							"yum" : {
  								"httpd" : [],
  								"php" : [],
  								"mysql" : [],
  								"php-mysql" : []
  							}
  						},
  						"sources" : {
  							"/var/www/html" : "http://wordpress.org/latest.tar.gz"
  						},
              "files" : {
                "/var/www/html/wordpress/wp-config.php" : {
                    "content" : { "Fn::Join" : ["", [
                      "<?php\n",
                      "define('DB_NAME',          '", {"Ref" : "DatabaseName"}, "');\n",
                      "define('DB_USER',          '", {"Ref" : "DatabaseUser"}, "');\n",
                      "define('DB_PASSWORD',      '", {"Ref" : "DatabasePassword" }, "');\n",
                      "define('DB_HOST',          '", {"Fn::GetAtt" : ["DB", "Endpoint.Address"]},"');\n",
                      "define('DB_CHARSET',       'utf8');\n",
                      "define('DB_COLLATE',       '');\n",
                      "define('AUTH_KEY',      '", {"Ref" : "AuthKey" }, "');\n",
                      "define('SECURE_AUTH_KEY',      '", {"Ref" : "SecureAuthKey" }, "');\n",
                      "define('LOGGED_IN_KEY',      '", {"Ref" : "LoggedInKey" }, "');\n",
                      "define('NONCE_KEY',      '", {"Ref" : "NonceKey" }, "');\n",
                      "define('AUTH_SALT',      '", {"Ref" : "AuthSalt" }, "');\n",
                      "define('SECURE_AUTH_SALT',      '", {"Ref" : "SecureAuthSalt" }, "');\n",
                      "define('LOGGED_IN_SALT',      '", {"Ref" : "LoggedInSalt" }, "');\n",
                      "define('NONCE_SALT',      '", {"Ref" : "NonceSalt" }, "');\n",
                      "define('WP_DEBUG'          , false);\n",
                      "define('FS_METHOD',        'direct');\n",
                      "$table_prefix  = 'wp_';\n",
                      "if ( !defined('ABSPATH') )\n",
                      "    define('ABSPATH', dirname(__FILE__) . '/');\n",
                      "require_once(ABSPATH . 'wp-settings.php');\n"
                    ]]},
                    "mode" : "000644",
                    "owner" : "root",
                    "group" : "root"
                        }
                      },
              "commands" : {
                "01_Set_WebServer_Ownership" : {
                    "command" : "sudo chown -R apache:apache /var/www/html/wordpress"
                  }
                },
  						"services" : {
  							"sysvinit" : {
  								"httpd" : {
  									"enabled" : "true",
  									"ensureRunning" : "true"
  								}
  							}
  						}
  					}
  				}
  			}
    },
    "S3" : {
        "Type" : "AWS::S3::Bucket",
        "DeletionPolicy" : "Retain",
        "Properties" : {
          "LoggingConfiguration" : {
            "DestinationBucketName" : {"Ref" : "DestinationBucketName"},
            "LogFilePrefix" : {"Ref" : "LogFilePrefix"}
          },
          "VersioningConfiguration" : {
            "Status" : "Enabled"
            }
          }
        }
      },
  "Outputs" : {
    "wproot" : {
      "Description" : "Access URL for wordpress",
      "Value" : {"Fn::Join" : ["",["https://", {"Fn::GetAtt" : ["ElasticLoadBalancer", "DNSName"]}, "/wordpress"]]}
    },
    "wpadmin" : {
      "Description" : "Admin Login URL - if restoring from snap, ALWAYS use this URL first",
      "Value" : {"Fn::Join" : ["",["https://", {"Fn::GetAtt" : ["ElasticLoadBalancer", "DNSName"]}, "/wordpress/wp-login.php"]]}
    }
  }
}
